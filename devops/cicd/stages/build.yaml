parameters:
  - name: name
    type: string
  - name: pipelineEnvironmentVariables
    type: string
  - name: poolName
    type: string
  - name: vmImage
    type: string
  - name: EnforceBranchControlPolicy
    type: boolean

stages:
  - stage: '${{ parameters.name }}'
    jobs:
      - job: Build
        displayName: 'Build'
        variables:
          - template: ${{ parameters.pipelineEnvironmentVariables }}
          - name: disable.coverage.autogenerate
            value: true
        
        workspace:
          clean: all
        
        pool:
          name: ${{ parameters.poolName }}
          vmImage: ${{ parameters.vmImage }}
        
        steps:
          - task: UseDotNet@2
            displayName: 'install .net 6.0 SDK'
            inputs:
              version: 6.x

          - task: Bash@3
            displayName: 'update version (gradle & plugin.xml)'
            inputs:
              targetType: filePath
              filePath: './update-version.sh'
              arguments: '$(Build.BuildNumber)'
            
          - task: Gradle@3
            displayName: 'gradlew :prepareSandbox'
            inputs:
              options: '-PPluginVersion=$(Build.BuildNumber)'
              tasks: ':prepareSandbox'
              publishJUnitResults: false
              jdkVersionOption: 1.17
          
          - task: CopyFiles@2
            displayName: 'copy .jar file'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: 'build/libs/mockingspongebob-$(Build.BuildNumber).jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/rider/mockingspongebob/lib'
              flattenFolders: true
          
          - task: CopyFiles@2
            displayName: 'copy plugin.xml file'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: 'build/resources/main/META-INF/plugin.xml'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/rider/mockingspongebob/META-INF'
              flattenFolders: true
            
          - task: CopyFiles@2
            displayName: 'copy dotnet file'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                src/dotnet/NoSuchCompany.MockingSpongebobPlugin/bin/NoSuchCompany.MockingSpongebobPlugin.Rider/Debug/NoSuchCompany.MockingSpongebobPlugin.dll
              
              
              TargetFolder: '$(Build.ArtifactStagingDirectory)/rider/mockingspongebob/dotnet'
              flattenFolders: true
                  
          - task: ArchiveFiles@2
            displayName: 'archive rider plugin'
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/rider/mockingspongebob'
              archiveFile: '$(Build.ArtifactStagingDirectory)/mockingspongebob.$(Build.BuildNumber).zip'
          
          - task: PublishBuildArtifacts@1
            displayName: 'publish rider plugin'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/mockingspongebob.$(Build.BuildNumber).zip'
              ArtifactName: 'mockingspongebob.rider.$(Build.BuildNumber)'

          - task: CopyFiles@2
            displayName: 'copy resharper plugin'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/src/dotnet/NoSuchCompany.MockingSpongebobPlugin/bin/NoSuchCompany.MockingSpongebobPlugin/Debug/'
              Contents: '*.nupkg'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/resharper'
              CleanTargetFolder: true
              flattenFolders: true
            
          - task: PublishBuildArtifacts@1
            displayName: 'publish resharper copy'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/resharper'
              ArtifactName: 'mockingspongebob.resharper.$(Build.BuildNumber)'
            
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: ${{ variables.jetbrainsNugetName }}
            enabled: false